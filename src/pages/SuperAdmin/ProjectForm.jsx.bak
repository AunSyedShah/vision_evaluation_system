import { useFormik } from 'formik';
import { useNavigate, useParams, Link } from 'react-router-dom';
import { useState, useEffect } from 'react';
import { createProject, updateProject, getProjectById } from '../../utils/api';

const ProjectForm = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [filePreviews, setFilePreviews] = useState({});
  const isEditMode = !!id;

  const formik = useFormik({
    initialValues: {
      username: '',
      startupName: '',
      founderName: '',
      email: '',
      phone: '',
      websiteLink: '',
      mobileAppLink: '',
      startupDescription: '',
      startupStatus: '',
      spotlightReason: '',
      // Files
      startupLogo: null,
      founderPhoto: null,
      defaultVideo: null,
      pitchVideo: null,
      image1: null,
      image2: null,
      image3: null
    },
    validate: values => {
      const errors = {};
      if (!values.startupName) errors.startupName = 'Startup name is required';
      if (!values.founderName) errors.founderName = 'Founder name is required';
      if (!values.email) {
        errors.email = 'Email is required';
      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)) {
        errors.email = 'Invalid email address';
      }
      if (!values.startupDescription) errors.startupDescription = 'Description is required';
      return errors;
    },
    onSubmit: async (values) => {
      await handleSubmit(values);
    }
  });

  useEffect(() => {
    if (isEditMode) {
      loadProject();
    }
  }, [id, isEditMode]);

  const loadProject = async () => {
    try {
      setLoading(true);
      const project = await getProjectById(parseInt(id));
      if (project) {
        formik.setValues({
          username: project.username || '',
          startupName: project.startupName || '',
          founderName: project.founderName || '',
          email: project.email || '',
          phone: project.phone || '',
          websiteLink: project.websiteLink || '',
          mobileAppLink: project.mobileAppLink || '',
          startupDescription: project.startupDescription || '',
          startupStatus: project.startupStatus || '',
          spotlightReason: project.spotlightReason || '',
          startupLogo: null,
          founderPhoto: null,
          defaultVideo: null,
          pitchVideo: null,
          image1: null,
          image2: null,
          image3: null
        });
      }
    } catch (err) {
      console.error('Failed to load project:', err);
      setError('Failed to load project details.');
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (fieldName, file) => {
    formik.setFieldValue(fieldName, file);
    
    // Create preview for images
    if (file && file.type.startsWith('image/')) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setFilePreviews(prev => ({ ...prev, [fieldName]: reader.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);
      setError('');
      
      // Create FormData for multipart upload
      const formData = new FormData();
      formData.append('Username', values.username);
      formData.append('StartupName', values.startupName);
      formData.append('FounderName', values.founderName);
      formData.append('Email', values.email);
      formData.append('Phone', values.phone);
      formData.append('WebsiteLink', values.websiteLink);
      formData.append('MobileAppLink', values.mobileAppLink);
      formData.append('StartupDescription', values.startupDescription);
      formData.append('StartupStatus', values.startupStatus);
      formData.append('SpotlightReason', values.spotlightReason);
      
      // Append files if they exist
      if (values.startupLogo) formData.append('StartupLogo', values.startupLogo);
      if (values.founderPhoto) formData.append('FounderPhoto', values.founderPhoto);
      if (values.defaultVideo) formData.append('DefaultVideo', values.defaultVideo);
      if (values.pitchVideo) formData.append('PitchVideo', values.pitchVideo);
      if (values.image1) formData.append('Image1', values.image1);
      if (values.image2) formData.append('Image2', values.image2);
      if (values.image3) formData.append('Image3', values.image3);
      
      if (isEditMode) {
        await updateProject(parseInt(id), formData);
      } else {
        await createProject(formData);
      }
      
      navigate('/superadmin/projects');
    } catch (err) {
      console.error('Failed to save project:', err);
      setError(err.response?.data?.message || 'Failed to save project. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#ab509d] mx-auto"></div>
          <p className="mt-4 text-gray-600">{isEditMode ? 'Loading project...' : 'Saving project...'}</p>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-8">
        <Link to="/superadmin/projects" className="text-[#ab509d] hover:text-[#964a8a] mb-4 inline-block">
          ‚Üê Back to Projects
        </Link>
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          {isEditMode ? 'Edit Project' : 'Add New Project'}
        </h1>
        <p className="text-gray-600">
          {isEditMode ? 'Update project information' : 'Fill in the project details below'}
        </p>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
          <p className="font-semibold">Error</p>
          <p className="text-sm">{error}</p>
        </div>
      )}

      <div className="bg-white rounded-xl shadow-md p-6">
        <form onSubmit={formik.handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Startup Name */}
            <div className="md:col-span-2">
              <label htmlFor="startupName" className="block text-sm font-medium text-gray-700 mb-2">
                Startup Name *
              </label>
              <input
                  id="title"
                  name="title"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.title}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                  placeholder="Enter project title"
                />
                {formik.touched.title && formik.errors.title && (
                  <div className="text-red-600 text-sm mt-1">{formik.errors.title}</div>
                )}
              </div>

              <div className="md:col-span-2">
                <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-2">
                  Description *
                </label>
                <textarea
                  id="description"
                  name="description"
                  rows="4"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.description}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                  placeholder="Enter project description"
                />
                {formik.touched.description && formik.errors.description && (
                  <div className="text-red-600 text-sm mt-1">{formik.errors.description}</div>
                )}
              </div>

              <div>
                <label htmlFor="startDate" className="block text-sm font-medium text-gray-700 mb-2">
                  Start Date *
                </label>
                <input
                  id="startDate"
                  name="startDate"
                  type="date"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.startDate}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                />
                {formik.touched.startDate && formik.errors.startDate && (
                  <div className="text-red-600 text-sm mt-1">{formik.errors.startDate}</div>
                )}
              </div>

              <div>
                <label htmlFor="endDate" className="block text-sm font-medium text-gray-700 mb-2">
                  End Date *
                </label>
                <input
                  id="endDate"
                  name="endDate"
                  type="date"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.endDate}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                />
                {formik.touched.endDate && formik.errors.endDate && (
                  <div className="text-red-600 text-sm mt-1">{formik.errors.endDate}</div>
                )}
              </div>

              <div>
                <label htmlFor="budget" className="block text-sm font-medium text-gray-700 mb-2">
                  Budget
                </label>
                <input
                  id="budget"
                  name="budget"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.budget}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                  placeholder="e.g., $50,000"
                />
              </div>

              <div>
                <label htmlFor="client" className="block text-sm font-medium text-gray-700 mb-2">
                  Client
                </label>
                <input
                  id="client"
                  name="client"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.client}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                  placeholder="Client name"
                />
              </div>

              <div className="md:col-span-2">
                <label htmlFor="technology" className="block text-sm font-medium text-gray-700 mb-2">
                  Technology Stack
                </label>
                <input
                  id="technology"
                  name="technology"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.technology}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#ab509d] focus:border-transparent outline-none"
                  placeholder="e.g., React, Node.js, MongoDB"
                />
              </div>
            </div>

            <div className="flex gap-4 pt-6 border-t border-gray-200">
              <button
                type="submit"
                className="px-4 sm:px-6 py-2 sm:py-3 bg-[#ab509d] hover:bg-[#964a8a] text-white text-sm sm:text-base font-semibold rounded-lg shadow-md transition duration-150"
              >
                {isEditMode ? 'Update Project' : 'Add Project'}
              </button>
              <button
                type="button"
                onClick={() => navigate('/superadmin/projects')}
                className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-lg transition duration-150"
              >
                Cancel
              </button>
            </div>
          </form>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="mb-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Bulk Upload via CSV/Excel</h3>
            <p className="text-sm text-gray-600 mb-4">
              Upload multiple projects at once using a CSV file. Download the sample format to see the required structure.
            </p>
            <button
              type="button"
              onClick={downloadSampleCSV}
              className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition duration-150"
            >
              üì• Download Sample CSV
            </button>
          </div>

          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
            <div className="mb-4">
              <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
              </svg>
            </div>
            <div className="mb-4">
              <label htmlFor="file-upload" className="cursor-pointer">
                <span className="px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 font-medium text-gray-700 transition duration-150">
                  Choose CSV File
                </span>
                <input
                  id="file-upload"
                  name="file-upload"
                  type="file"
                  accept=".csv,.xlsx,.xls"
                  onChange={handleFileChange}
                  className="hidden"
                />
              </label>
            </div>
            {csvFile && (
              <p className="text-sm text-gray-600 mb-4">
                Selected: <span className="font-medium">{csvFile.name}</span>
              </p>
            )}
            <p className="text-xs text-gray-500">CSV or Excel files only</p>
          </div>

          <div className="flex gap-4 mt-6 pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={handleBulkUpload}
              disabled={!csvFile}
              className={`px-6 py-3 font-semibold rounded-lg shadow-md transition duration-150 ${
                csvFile
                  ? 'bg-[#ab509d] hover:bg-[#964a8a] text-white'
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              Upload Projects
            </button>
            <button
              type="button"
              onClick={() => navigate('/superadmin/projects')}
              className="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-lg transition duration-150"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProjectForm;
